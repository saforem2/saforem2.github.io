---
jupyter: brew-py311
title: "Long Sequence Lengths"
callout-appearance: simple
title-block-banner: false
# https://www.anl.gov/sites/www/files/2021-09/CPA_RESIZE_Climate%20Resilience%20Images_01_1920x1080.jpg
editor:
   render-on-save: true
execute:
   freeze: true
---

<!-- <img align="left" width="48%"  src="https://raw.githubusercontent.com/saforem2/scaling4science/main/assets/25B.svg"> <img align="right" width="48%" src="https://raw.githubusercontent.com/saforem2/scaling4science/main/assets/33B.svg"> -->


<!-- | MODEL_SIZE | GPUs | Implementation | SEQ_LEN (k) |   Improvement | -->
<!-- |:----------:|:----:|:--------------:|:-----------:| -------------:| -->
<!-- |    25B     |  32  |      OLD       |     28      |  4.5714285714 | -->
<!-- |            |      |     NVIDIA     |     14      |  9.1428571429 | -->
<!-- |            |      |      NEW       |   [128]{.red-text}   |             1 | -->
<!-- |    25B     |  64  |      OLD       |     32      |            12 | -->
<!-- |            |      |     NVIDIA     |     46      |   8.347826087 | -->
<!-- |            |      |      NEW       |   [384]{.red-text}   |             1 | -->
<!-- |    25B     | 128  |      OLD       |     32      |            14 | -->
<!-- |            |      |     NVIDIA     |     52      |  8.6153846154 | -->
<!-- |            |      |      NEW       |  [448]{.red-text}   |             1 | -->
<!-- |    33B     |  32  |      OLD       |     36      |  5.3333333333 | -->
<!-- |            |      |     NVIDIA     |     26      |  7.3846153846 | -->
<!-- |            |      |      NEW       |   [192]{.red-text}   |             1 | -->
<!-- |    33B     |  64  |      OLD       |     42      |   10.66666666 | -->
<!-- |            |      |     NVIDIA     |     48      |   9.333333333 | -->
<!-- |            |      |      NEW       |   [448]{.red-text}   |             1 | -->
<!-- |    33B     | 128  |      OLD       |     42      | 12.1904761905 | -->
<!-- |            |      |     NVIDIA     |     52      |  9.8461538462 | -->
<!-- |            |      |      NEW       |   [512]{.red-text}   |             1 | -->
<!---->

```{python}
%load_ext autoreload
%autoreload 2
import numpy as np
import matplotlib.pyplot as plt
```

```{python}
import os
import datetime
from typing import Tuple
from pathlib import Path
from toolbox import set_plot_style
# from toolbox import get_console
import seaborn as sns

set_plot_style()
# console = get_console()


sns.set_context('talk')
set_plot_style()

def save_figure(
        fname: str,
        outdir: os.PathLike,
):
    pngdir = Path(outdir).joinpath('pngs')
    svgdir = Path(outdir).joinpath('svgs')
    pngdir.mkdir(exist_ok=True, parents=True)
    svgdir.mkdir(exist_ok=True, parents=True)
    pngfile = pngdir.joinpath(f'{fname}.png')
    svgfile = svgdir.joinpath(f'{fname}.svg')
    # console.print(f'Saving figures to: {outdir}' + '/{pngs,svgs}/' + f'{fname}*')
    _ = plt.savefig(pngfile, dpi=400, bbox_inches='tight')
    _ = plt.savefig(svgfile, dpi=400, bbox_inches='tight')
```

```{python}
labels = ('32', '64', '128')

data = {
    '25B': {
        'Old': (28, 32, 32),
        'Nvidia': (14, 46, 52),
        'New': (128, 384, 448),
    },
    '33B': {
        'Old': (36, 42, 42),
        'Nvidia': (26, 48, 52),
        'New': (192, 448, 512),
    }
}
```

::: {#fig-seq-len}

```{python}
#| layout-ncol: 2
#| fig-cap:
#|   - "Line Plot 1"
#|   - "Line Plot 2"
x = np.arange(len(labels))
width = 0.25
multiplier = 0

outdir = Path(os.getcwd()).joinpath('assets')
outdir.mkdir(exist_ok=True, parents=True)
# console.log(f'Saving figures to: {outdir}')

from toolbox import COLORS
colors = {
    'Old': COLORS['red'],
    'Nvidia': COLORS['green'],
    'New': COLORS['blue']
}
# plt.tight_layout()
for model_size, d in data.items():
    multiplier = 0
    figure, axes = plt.subplots(layout='constrained')
    fig = plt.gcf()
    ax = plt.gca()
    for label, value in d.items():
        offset = width * multiplier
        rects = ax.bar(x + offset, value, width, label=label, color=colors[label])
        ax.bar_label(rects, padding=3)
        multiplier += 1
    ax.set_ylabel('Sequence Length (k)', fontsize='large')
    ax.set_xlabel('GPUs', fontsize='large')
    ax.set_title(f'{model_size} Model', fontsize='large')
    ax.set_xticks(x + width, labels)
    ax.legend(loc='best', ncols=1, frameon=True)  # , bbox_to_anchor=(1.05, 1.0))
    save_figure(fname=f'{model_size}', outdir=outdir)
    _ = plt.show()
```

Maximum Sequence Lengths Achievable across different implementations, model
sizes and GPUs. In each case, the `new` (current) implementation
**significantly** outperforms both NVIDIA/Megatron-LM as well as our previous
implementation.
:::

::: {#fig-table}

```{python}
import pandas as pd
from toolbox import get_console
console = get_console()
df = pd.read_csv('./data.csv')
df
# pd.DataFrame(data)
# console.print(df)
```

Maximum Sequence Length Results
:::
